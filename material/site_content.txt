Content für www.libavg.de


Inhalt

  Main
    About
    Mission
    Features
    License
    Download
    Mailing List
    Related --> wiki/RelatedPackages
    
  Docs
    Tutorials --> wiki/Tutorials
    Reference --> reference/trees.html, ändert sich nicht
    Installing
    
    

Rechte Spalte: Showcase images für 'Projects Realized Using libavg':

    timescope
    Photobox Werder Bremen
    c-base Airlock
    c-base Infoscreens
    Videochooser
    
    
About
-----

libavg is a high-level multimedia platform with a focus on interactive installations. It is meant to pick up where Macromedia Director leaves off and gives you high-quality hardware-accelerated visuals as well as easy and flexible authoring, testing and deployment. libavg integrates well with other open-source solutions for sound, networking and hardware device support, resulting in a complete and well-integrated package. It uses an xml-based layout language for screen design and python as scripting language.

libavg is currently available for Linux and Mac OS X. It is open source and licensed under the LGPL (For details, click on License in the menu).


Work on New Website Started - April 23, 2006

Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed


c-base Take-Off Imminent - May 2, 2023

Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed



Mission
-------

Ulrich von Zadow, April 2006

When artists and designers build computer-based installations, they often need to rely on a framework for managing high-quality interactive visuals and sound. In the past, most such installations were built using Macromedia Director (or possibly Flash) and ran under Microsoft Windows or Mac OS. avg is an open source alternative to these systems – a free plattform for multimedia installations that has some distinct advantages when compared to the proprietary solutions. 

The avg project started in 2003, when we were trying to build an installation in the c-base (www.c-base.org) and got fed up with the apparent impossibility of doing what we wanted legally without paying for software. 


Requirements

At the start of the project, something that could be termed requirements gathering took place: I sat in bars late at night listening to people who build installations telling me how they work and what they’d like to be able to do. I combined this with my own experiences in building installations and came up with the following list of needed features:

-	High-quality visuals: The system would need good performance (better than current solutions), high-resolution video playback, good font rendering and layout support, seamless integration of different media, easy and flexible authoring of effects.

-	High-quality sound: Low-latency sound playback would be essential, as would mixing of several sounds. Support for multi-channel playback to account for installations with lots of speakers would be nice.

-	Quick authoring: Artists and designers would need an easy and flexible method of specifying the intended results. Short time intervals between authoring changes and seeing the results would be essential.

-	Support for a broad range of systems: Linux PCs and Macs would need to be supported. Linux is ideal for media installations, not only because it is open source, but also because it has very good support for the sort of ‘embedded’ systems that installations use and is easy to work with when the computer is only accessible over a network. Macs are ideal for authoring, because all the other tools the designer needs to build installations are available on this plattform.

In addition to state-of-the-art computers, legacy systems should be supported so low-budget projects can use it.

-	Openness for expansion: This cannot be stressed enough. The potential users of the plattform would be free-minded, intelligent people who don’t like to be fenced in. An open source plattform helps a lot here, the intention being that missing features can be added by those people that need them.


Alternatives: Director, Flash, svg players

Of course, if the commercial products did everything authors want, it would be hard to convince most people to use an open-source counterpart.

They don’t.

Director still has a slow rendering engine that does all computation in software. Font quality is medicore, so designers regularly pre-render text in image processing programs and import the images in Director. (Needless to say, that results in lots of extra work if the text needs to be changed during production). There is no linux player.

Flash focuses on internet delivery. It is optimized for small downloads, thus the good support for vector graphics. It is not made to handle complex bitmapped graphics and videos, causing performance problems. Like in director, all rendering is done in software and there is no up-to-date playback engine for Linux.

The open svg (Scalable Vector Graphics) standard is an attempt to build an open standard alternative to flash. While interesting, the standard does not support video. It is also a large standard that is hard to implement completely.


Concept

Central to the avg plattform is an xml-based screen layout language named – you guessed it – avg. This language is simliar to svg, with lots of vector-oriented features missing and things like video support added. Dynamic, reactive or interactive elements are scripted in python. The result is that there’s a clear separation between static content (screen layout) and dynamics (animations, user interaction). This makes it easy for content and dynamics to be handled by different people if necessary or convenient. 

As an example, here is an avg file that displays a bitmap on the screen:

<avg id="mainavgnode" width="640" height="480" fullscreen="true">
  <image id="logo" x="0" y="0" z="1” href="avglogo.tif"
         onmouseover="disappear"/>
</avg>

And this is a python snippet that gets called when the user moves the mouse over the bitmap and makes it disappear:

def disappear():
    logoNode = AVGPlayer.getElementByID("logo")
    logoNode.opacity = 0



Features
--------

libavg includes a hardware-accelerated display mixer and screen layout engine and integrates high-performance video playback. It supports paragraph-level text layout and rendering as well as cameras. Nearly all parameters can be changed at runtime using python scripts. Input is supported using mouse, keyboard and touchscreens. Among others, libavg projects have used motors, coin rejectors and relays attached to parallel and serial ports, worked with usb bluetooth dongles and integrated printing.


Screen Layout Engine

The screen layout engine is at the heart of avg. It is responsible for dealing with graphical elements (images, videos, text, camera output) in a generic way and for putting these on the screen. Among others, it supports

- Hierarchial layouts
- Cropping 
- Scaling
- Rotation
- Element-level transparency 
- Image alpha channels
- Additive and subtractive as well as averaging blend modes
- Subpixel precision for smooth animations
- Hardware-accelerated OpenGL rendering or software DirectFB rendering
- Warping and mirroring of elements


Video Support

libavg video support means

- Several videos at once
- Playback pause and restart
- Complete display engine integration, including cropping, scaling, rotation and transparency
- Very high performance: An Athlon 64 2.0 GHz machine can display 10 352x240 videos at once at 60 frames per second.
- Seeks at interactive rates: The same computer displays every third frame of a 1536x1024 video running backwards, also at 60 frames per second.


Text support

Text rendering is supported with:

- Paragraph-level layout using html <div>-like syntax
- Bold/italic etc.
- Colored text
- Left-/Right-justified as well as centered paragraphs
- Kerning and antialiasing
- Full internationalization using utf8: Arabic, Chinese and Hebrew are all rendered correctly and can be mixed
- Layout - including font face and size - changes in mid-paragraph


Camera support

libavg supports a wide variety of firewire cameras with resolutions up to 1024x768. Setting camera parameters such as brightness, exposure, saturation and gamma is also possible.


Authoring

All of python is available for scripting. libavg directly provides:

- Properties of display elements as python variables
- Function calls when input events happen
- Timers (setTimeout, setInterval)
- Support for logging
- High-level profiling to find performance bottlenecks
- High-precision frame timing and synchronization to vertical blanking for smooth animations



License
-------

libavg is open source software. It is available under the GNU Lesser General Public License (LGPL) [http://www.gnu.org/copyleft/lesser.html] version 2.1 or newer. Our main intent in distributing it under this license is to allow all commercial and non-commercial entities to use the library, provided they give all improvements to libavg that are made for one project back to the community.

If you have any questions regarding licensing or if you require a different license, please contact the copyright holder, Ulrich von Zadow, directly. 



Download
--------


Version 0.5.6:

  Source code: [libavg-0.5.6.tar.gz]

  Gentoo ebuild: [libavg-0.5.6.ebuild]

  Mac OS X package: [libavg-mac.0.5.6.zip]


cvs access: 

  See [http://sourceforge.net/cvs/?group_id=75968]



Mailing List
------------

There is a mailing list set up for libavg. You can subscribe here: [http://c-base.net/cgi-bin/mailman/listinfo/libavg-users].

The archive of previous postings to the mailing list is here: [http://c-base.net/pipermail/libavg-users/]



Installing
----------

libavg currently runs on i386 Linux systems and on PPC Mac OS X. There are packages for Gentoo and Debian Linux as well as Mac OS X. For other systems, you'll have to download the source and compile by hand.


Mac OS X

Download the 'libavg-mac.x.y.z.zip' from the download page, unzip it and double-click on 'libavg.pkg'.


Gentoo

Download 'libavg-x.y.z.ebuild' from the download page, copy it to your portage overlay directory under 'media-libs/' and execute emerge libavg as root. Information on setting up a portage overlay can be found here: [http://gentoo-wiki.com/HOWTO_Installing_3rd_Party_Ebuilds]


Debian

libavg itself can be installed with apt-get install libavg. However, it needs ffmpeg, which will only be found if
'deb ftp://ftp.nerim.net/debian-marillat/ sid main'
is added to '/etc/apt/sources.list' first.


Source install

libavg uses a lot of third-party libraries. What follows is a list of packages you'll need. The package names are the names of the gentoo packages needed. For other distributions, the list should enable you to find what's needed. In many cases, libavg checks during configure that these libraries are installed, so you'll probably get configure failures if they aren't.

- imagemagick (Tested with 6.2.2.3)
- ffmpeg 0.4.9pre1 or later. 0.4.8 doesn't work. Actually, ffmpeg isn't needed directly, but it's base libraries libavcodec and libavformat are. Debian users need to add 'deb ftp://ftp.nerim.net/debian-marillat/ sid main' to '/etc/apt/sources.list' to get this package.
- libsdl. Tested with 1.2.5 and 1.2.8 (only needed for OpenGL and non-fullscreen DirectFB support).
- Working OpenGL in some form or other or
- DirectFB (Tested with 0.9.22, 0.9.19 and up should work.)
- libxml2 (Tested with 2.6.19.)
- libfreetype (Tested with 2.1.9)
- pango (Tested with 1.8.1)
- Optional: libdc1394 for Firewire digital camera support. (Tested with 0.9.3 and 1.1.0)
- python 2.3.x or newer.
- boost-python (Tested with 1.31.0 and 1.33.0).

Once these libraries are installed, you can get libavg-x.y.z.tar.gz from the download page, unpack it and call

  './configure'
  'make'
  'make install'
  
If you do a cvs checkout instead of a download, you need to call ./bootstrap before calling configure. Running bootstrap requires a working autotools setup: autoconf, automake and libtool need to be installed. If you get bootstrap failures, chances are you're using different versions of these tools than we are: autoconf 2.59, automake 1.9.6, libtool 1.5.18.


Troubleshooting Linux Direct Rendering

You can test if OpenGL is running accelerated by running 'glxinfo'. If it sais "Direct Rendering: yes", everything is set. If not, you'll have to google for instructions involving your graphics card and your distribution. libavg will run with unaccelerated OpenGL, but that's slow. Really slow.
